pop
summary(stat[[30]])[2]
summary(stat[[30]])[1,2]
summary(stat[[30]])[1]
summary(stat[[30]])$coef[4]
summary(stat[[30]])$coef
summary(stat[[30]])$coef[2,4]
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(stat[[30]])$coef[2,4])				#
}
warnings()
head(GT.Qual)
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
head(jptSub)
qqnorm(jptSub$Plog10)
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}
warnings()
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
head(gtQual)
str(gtQual)
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))
ggplot(Hamming,aes(x=Distance))+geom_point()+facet_grid(Pop~Pop)
ggplot(Hamming,aes(x=Distance))+geom_density()+facet_grid(.~Pop)
ggplot(Hamming,aes(x=Distance, fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''#
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Pos<-as.numeric(as.character(GT.Qual$Pos))#
GT.Qual$beta<-as.numeric(as.character(GT.Qual$beta))#
GT.Qual$intercept<-as.numeric(as.character(GT.Qual$intercept))#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
warnings()
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
jptSub<-GT.Qual[which(GT.Qual$Pop=='GBR'),]
qqnorm(jptSub$Plog10)
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
ggsave('~/Documents/Regression/JPT_sig6_Plog10PerPop.jpg',height=5,width=8)
ggsave('~/Documents/Regression/JPT_sig6_Plog10PerPop.jpg',height=8,width=11)
head(GT.Qual[which((GT.Qual$Plog10 > 6)&(GT.Qual$Pop == 'JPT')),])
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()
head(GT.Qual[which((GT.Qual$Plog10 > 8)&(GT.Qual$Pop == 'JPT')),])
head(GT.Qual[which((GT.Qual$Plog10 > 7)&(GT.Qual$Pop == 'JPT')),])
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_manual(breaks=c(0,1))
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))+labs(y='Genotype',x='Quality')
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))+labs(y='Genotype',x='Quality')+geom_smooth(method = "glm",     method.args = list(family = "binomial"), se = FALSE,size=0.5)
write.table(unique(Meta[c('Name','Pop', 'average_quality_of_mapped_bases')]), file='/Volumes/SpaceMan/QualityScoresPerID.txt')
<<<<<<< HEAD
inFile <- file(description='/Users/luke/Documents/Regression/CHR22.Format_JPT.csv', ,open="r")
colNames=c('Chr','Pos','Name','value','Pop','average_quality_of_mapped_bases','fixed')   #
dataChunk <- read.table(inFile, nrows=chunkSize,col.names=colNames, sep=',')#
PopSize <- length(unique(dataChunk$Name))#
chunkSize <- chunkSize * PopSize#
dataChunk <- read.table(inFile, nrows=chunkSize,col.names=colNames, sep=',')#
print(head(dataChunk))
index <- 0#
counter <- 0#
chunkSize <- 1000
library(data.table)
colNames=c('Chr','Pos','Name','value','Pop','average_quality_of_mapped_bases','fixed')   #
dataChunk <- read.table(inFile, nrows=chunkSize,col.names=colNames, sep=',')#
PopSize <- length(unique(dataChunk$Name))#
chunkSize <- chunkSize * PopSize#
dataChunk <- read.table(inFile, nrows=chunkSize,col.names=colNames, sep=',')#
print(head(dataChunk))
as.data.frame(table(dataChunk$Pos))
inFile <- read.table('/Users/luke/Documents/Regression/CHR22.Format_JPT.csv',sep=',')
inFile <- fread('/Users/luke/Documents/Regression/CHR22.Format_JPT.csv',sep=',')
head(inFile)
Positions<-unique(inFile$Pos)
length(Positions)
close(inFile)
Input <- fread('/Users/luke/Documents/Regression/CHR22.Format_JPT.csv',sep=',')#
Positions<-unique(Input $Pos)
for(chunk in seq(1,length(Positions),100)){print(chunk)}
for(chunk in seq(0,length(Positions),100)){print(chunk)}
split(Positions, ceiling(seq_along(Positions)/100))
chunks=split(Positions, ceiling(seq_along(Positions)/100))
chunks[1]
chunks[[1]]
for(chunk in chunks){#
	print('Yo')#
	print(chunk)#
}
index <- 1#
for(chunk in chunks){#
print(paste('working on chunk :',index))#
subChunk<-GT.Qual[which(GT.Qual$Pos %in% chunk),]	#
stat <- with(GT.Qual, by(GT.Qual,Pos, function(x) #
		glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
#extract P value#
less = unique(GT.Qual[,c('Chr','Pos','Pop')])#
less$p = -log10(as.numeric(as.character(sapply(stat,function(x) summary(x)$coef[2,4]))))#
#write results to file#
if(index == 1){#
	print('Writing to new Output')#
	write.table(less,file=args[2], quote=F, row.names=F, append=FALSE)}#
if(index > 1){#
    print('Writing to existing Output')#
    write.table(less,file=args[2], quote=F, row.names=F, append=TRUE)}#
index <- index + 1#
}
chunks=split(Positions, ceiling(seq_along(Positions)/100))#
index <- 1#
for(chunk in chunks){#
print(paste('working on chunk :',index))#
subChunk<-Input[which(Input $Pos %in% chunk),]	#
stat <- with(subChunk, by(subChunk,Pos, function(x) #
		glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
#extract P value#
less = unique(subChunk[,c('Chr','Pos','Pop')])#
less$p = -log10(as.numeric(as.character(sapply(stat,function(x) summary(x)$coef[2,4]))))#
#write results to file#
if(index == 1){#
	print('Writing to new Output')#
	write.table(less,file=args[2], quote=F, row.names=F, append=FALSE)}#
if(index > 1){#
    print('Writing to existing Output')#
    write.table(less,file=args[2], quote=F, row.names=F, append=TRUE)}#
index <- index + 1#
}
length(chunks)
Logistic<-fread('~/Documents/Regression/CHR22.Regression_JPT.csv', header=T)
ggplot(Logistic,aes(x=p), color='grey70')+geom_density()+theme_classic()
library(ggplot2)
ggplot(Logistic,aes(x=p), color='grey70')+geom_density()+theme_classic()
=======
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes\ 2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, nrow=100)
library(reshape2)
#Pop and Ind Names #~/genomes/genomes/PopNames/Name.BigPop.Pop.txt#
NamePop<-read.table('~/Documents/PhD/data/Name.BigPop.Pop.txt', col.names=c('Name', 'BigPop', 'Pop'))#
NamePop<-NamePop[which(NamePop$Pop != 'NAG'),]#
#
#Quality per individual#
Meta<-read.table("~/Dropbox/LukeTemp/1000GenomesMetaData.txt")#
Meta$SUBMISSION.DATE<-as.Date(Meta$SUBMISSION.DATE, "%Y-%m-%d")  #
SubMeta<-unique(Meta[c('Name','Pop', 'average_quality_of_mapped_bases')])#
print('Welcome to the R script')
names(GT)=c('Chr','Pos', as.character(NamePop$Name))#
print('Table is Loaded')#
#Melt, reshape#
melt.GT<-melt(GT,id=c('Chr','Pos'))#
rm(GT)#
print('Table is Melted')#
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
rm(melt.GT)
head(melt.GT)
write.table(SubMeta,file='~/Dropbox/LukeTemp/SubMeta.txt')
SubMeta <-read.table('~/Dropbox/LukeTemp/SubMeta.txt')
print('Table is Loaded')#
#Melt, reshape#
melt.GT<-melt(GT,id=c('Chr','Pos'))#
rm(GT)#
print('Table is Melted')#
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
rm(melt.GT)#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]
??ggplot2
??%>%
?%>%
??pipe
library(magrittr)
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame
??group_by
??group
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame
?group_by
??group_by
??group by
??group
head(table(GT.Qual$value, GT.Qual $Pos, GT.Qual $Pop))
head(table(GT.Qual$value))
head(GT.Qual$value)
head(GT.Qual)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
melt.GT<-melt(GT,id=c('Chr','Pos'))
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, nrow=100)
names(GT)=c('Chr','Pos', as.character(NamePop$Name))#
print('Table is Loaded')#
#Melt, reshape#
melt.GT<-melt(GT,id=c('Chr','Pos'))#
rm(GT)#
print('Table is Melted')#
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
rm(melt.GT)#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]
head(table(GT.Qual$value))
head(GT.Qual)
head(SubMeta)
head(GT)
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, nrow=100)
head(GT)
names(GT)=c('Chr','Pos', as.character(NamePop$Name))
melt.GT<-melt(GT,id=c('Chr','Pos'))
head(melt.GT)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
GT.Qual$Pop<-as.factor(GT.Qual$Pop)
GT.Qual$Pos<-as.factor(GT.Qual$Pos)
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))
head(GT.Qual)
head(table(GT.Qual$value))
head(table(GT.Qual$value,T.Qual$Pop))
head(table(GT.Qual$value,GT.Qual$Pop))
head(as.data.frame(table(GT.Qual$value,GT.Qual$Pop)))
head(as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos)))
names(dfSums)<-c('value','Pop','Pos','Freq')
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))
names(dfSums)<-c('value','Pop','Pos','Freq')
head(dfSums)
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr')]
head(GT.Qual)
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])
gtQual$value<-as.numeric(as.character(gtQual$value))
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value')]
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value')]#
#
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])
gtQual$value<-as.numeric(as.character(gtQual$value))
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value.x')]
head(GT.Qual)
gtQual$value<-as.numeric(as.character(gtQual$value.x))
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])
gtQual$value<-as.numeric(as.character(gtQual$value.x))
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])
head(stat[[20]])
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]#
#
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
head(GT.Qual)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#rm(melt.GT)#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value.x')]
head(GT.Qual)
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value.x ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
head(stat[[1]])
head(GT.Qual)
test<-droplevels(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos=='16554752'))),])
test<-droplevels(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos=='16554752')),])
head(test)
glm(value.x ~ average_quality_of_mapped_bases, data=test, family=binomial)
head(test)
ggplot(test, aes(x= average_quality_of_mapped_bases, y= value.x))+geom_point()
library(ggplot2)
ggplot(test, aes(x= average_quality_of_mapped_bases, y= value.x))+geom_point()
head(dfSums)
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))
head(GT.Qual)
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]
head(GT.Qual)
test<-droplevels(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos=='16554752')),])
ggplot(test, aes(x= average_quality_of_mapped_bases, y= value.x))+geom_point()
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))
>>>>>>> origin/master
#load libraries#
library(ggplot2)#
library(cowplot)#
library(data.table)#
#pop names, used to read/write files#
pops<-read.table('/Users/luke/Documents/MutSpect/WrapUpPlots/NamePop.txt')#
#read colors per pop (used in 1kG Nature)#
colors<-read.table("~/Dropbox/LukeTemp/NamePopBigPop_color.html.txt", comment.char='>',col.names=c('Pop','hex','BigPop'))#
MyColour <- as.character(colors $hex)#
names(MyColour) <- colors $Pop#
#
#read the list of sig snps#
#bad=read.table('~/Documents/1FinalGWAS/1kGP_GenomeWide.4bed_filtered_sig6.POS.txt',col.names=c('Chr', 'Pos'))#
dir='/Volumes/gravel/luke_projects/1000Genomes/Regression/GenomeWide.Regression_PUR.csv'#
fileNames = list.files(path=dir, pattern=GenomeWide.Regression_*.csv, full.names = T)
fileNames = list.files(path=dir, pattern='GenomeWide.Regression_*.csv', full.names = T)
fileNames
fileNames = list.files(path=dir, pattern='GenomeWide.Regression_', full.names = T)
fileNames
fileNames = list.files(path=dir, pattern='GenomeWide*', full.names = T)
fileNames
dir='/Volumes/gravel/luke_projects/1000Genomes/Regression/'
fileNames = list.files(path=dir, pattern='GenomeWide', full.names = T)
fileNames
fileNames = list.files(path=dir, pattern='GenomeWide*sig.csv', full.names = T)
fileNames
fileNames = list.files(path=dir, pattern='sig.csv', full.names = T)
fileNames
fileNames = list.files(path=dir, pattern='sig.csv', full.names = T)
fileNames
Reg = do.call(rbind, lapply(fileNames, function(x) fread(x)))
head(Reg)
table(Reg$Chr)
Reg<-Reg[which(Reg$Pos != 'Pos'),]#
Reg$Chr<-as.numeric(as.character(Reg$Chr))#
Reg$Pos<-as.numeric(as.character(Reg$Pos))#
Reg$dev<-as.numeric(as.character(Reg$dev))
Reg$plog10 <- - pchisq(Reg$dev, 1, lower.tail=F, log.p=T)/log(10)
table(Reg$Chr)
NumPop<-as.data.frame(table(Reg$Chr,Reg$Pos))#
UnPop<-NumPop[which(NumPop$Freq==1),]#
NumPop<-NumPop[which(NumPop$Freq>1),]
m=merge(Reg,NumPop, by.y=c('Var1','Var2'), by.x=c('Chr','Pos'))
head(Reg)
head(NumPop)
str(Reg)
str(NumPop)
NumPop$Var1<-as.numeric(as.character(NumPop$Var1))
NumPop$Var2<-as.numeric(as.character(NumPop$Var2))
m=merge(Reg,NumPop, by.y=c('Var1','Var2'), by.x=c('Chr','Pos'))
n=as.data.frame(table(m$Pop))
plt=merge(m,n,by.x='Pop',by.y='Var1')
plt <- plt[with(plt, order(-Freq.x, as.numeric(Chr),as.numeric(Pos))),]
plt$Pos <- factor(plt$Pos, levels = unique(plt$Pos))
plt$nrow<-seq(length=nrow(plt))
plt$Pcat<-4
plt[which(plt$Plog10 <8),]$Pcat<-2
plt[which((plt$Plog10 >8) & (plt$Plog10 <10)),]$Pcat<-3
xaxis<-plt[!duplicated(plt[,c('Freq.x')]), ]
xaxis<-xaxis[which(xaxis$Freq.x<11),]
xaxis<-rbind(xaxis,tail(plt,1))
p1=ggplot(plt, aes(x=Pos,y= reorder(Pop,-Freq.y), color=Pop, size=Pcat))+geom_point(shape=3)+theme_classic()+scale_size(breaks=c(2,3,4), range=c(1,3),labels=c('6-8','8-10','10+'), guide = guide_legend(direction = "horizontal"), name='-log10(p)')+scale_color_manual(breaks= plt$Pop,values = MyColour)+ylab('Populations')+ggtitle('Overlap of SNPs found to be Significant in Quality-GWAS')+theme(legend.position = c(0.85,0.95),legend.box.background = element_rect(colour = "black"), plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(1,1,0,1), "cm"))+guides(color=F)#
#
p2=ggplot(plt, aes(x=Pos,y= Freq.x, group=1))+geom_hline(yintercept=1, color='grey', linetype=2)+geom_hline(yintercept=5, color='grey', linetype=2)+geom_hline(yintercept=10, color='grey', linetype=2)+geom_line()+theme_classic()+theme(plot.title = element_text(hjust = 0.5), plot.margin = unit(c(0,1,1,1), "cm"))+labs(x='SNPs ranked by frequency of occurence and genomic position', y='Frequency\nof Occurence')+scale_y_continuous(limits=c(0,16),breaks=c(1,5,10,15))+scale_x_discrete(expand=c(0.01,0),breaks=xaxis$Pos, labels=xaxis$nrow)#
#
p3=plot_grid(p1, p2, ncol=1, align="v", rel_heights = c(3, 1))
p1
head(plt)
table(plt$Pcat)
Reg<-Reg[which(Reg$plog10 >= 6),]
NumPop<-as.data.frame(table(Reg$Chr,Reg$Pos))#
UnPop<-NumPop[which(NumPop$Freq==1),]#
NumPop<-NumPop[which(NumPop$Freq>1),]#
NumPop$Var1<-as.numeric(as.character(NumPop$Var1))#
NumPop$Var2<-as.numeric(as.character(NumPop$Var2))#
#
m=merge(Reg,NumPop, by.y=c('Var1','Var2'), by.x=c('Chr','Pos'))#
n=as.data.frame(table(m$Pop))#
plt=merge(m,n,by.x='Pop',by.y='Var1')#
plt <- plt[with(plt, order(-Freq.x, as.numeric(Chr),as.numeric(Pos))),]#
plt$Pos <- factor(plt$Pos, levels = unique(plt$Pos))#
plt$nrow<-seq(length=nrow(plt))#
plt$Pcat<-4#
plt[which(plt$Plog10 <8),]$Pcat<-2#
plt[which((plt$Plog10 >8) & (plt$Plog10 <10)),]$Pcat<-3#
#
xaxis<-plt[!duplicated(plt[,c('Freq.x')]), ]#
xaxis<-xaxis[which(xaxis$Freq.x<11),]#
xaxis<-rbind(xaxis,tail(plt,1))
table(plt$Pcat)
plt[which(plt$plog10 <8),]$Pcat<-2
plt[which((plt$plog10 >8) & (plt$plog10 <10)),]$Pcat<-3
table(plt$Pcat)
p1=ggplot(plt, aes(x=Pos,y= reorder(Pop,-Freq.y), color=Pop, size=Pcat))+geom_point(shape=3)+theme_classic()+scale_size(breaks=c(2,3,4), range=c(1,3),labels=c('6-8','8-10','10+'), guide = guide_legend(direction = "horizontal"), name='-log10(p)')+scale_color_manual(breaks= plt$Pop,values = MyColour)+ylab('Populations')+ggtitle('Overlap of SNPs found to be Significant in Quality-GWAS')+theme(legend.position = c(0.85,0.95),legend.box.background = element_rect(colour = "black"), plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(1,1,0,1), "cm"))+guides(color=F)#
#
p2=ggplot(plt, aes(x=Pos,y= Freq.x, group=1))+geom_hline(yintercept=1, color='grey', linetype=2)+geom_hline(yintercept=5, color='grey', linetype=2)+geom_hline(yintercept=10, color='grey', linetype=2)+geom_line()+theme_classic()+theme(plot.title = element_text(hjust = 0.5), plot.margin = unit(c(0,1,1,1), "cm"))+labs(x='SNPs ranked by frequency of occurence and genomic position', y='Frequency\nof Occurence')+scale_y_continuous(limits=c(0,16),breaks=c(1,5,10,15))+scale_x_discrete(expand=c(0.01,0),breaks=xaxis$Pos, labels=xaxis$nrow)#
#
p3=plot_grid(p1, p2, ncol=1, align="v", rel_heights = c(3, 1))
p3
dev.off()
dev.off()
p3
head(plt)
max(Freq.x)
max(plt$Freq.x)
ggsave('~/Documents/QualityPaper/SNPOverlap6.jpg',p3, height=9, width=9)
