GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) coef(x)[4])
heaD(GT.Qual[which(GT.Qual$Pop==pop),])
head(GT.Qual[which(GT.Qual$Pop==pop),])
stat[[1]]
coef(stat[[1]])
stat[[10]]
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])
GT.Qual$intercept=''
GT.Qual$beta=''
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])
ggplt(GT.Qual[which(GT.Qual$Pop==pop),], aes(x=intercept,y=beta))+geom_point()
ggplot(GT.Qual[which(GT.Qual$Pop==pop),], aes(x=intercept,y=beta))+geom_point()
ggplot(GT.Qual[which(GT.Qual$Pop==pop),], aes(x=intercept,y=beta))+geom_point()+theme(axis.text=element_blank(), axis.ticks=element_blank())
min(GT.Qual$intercept)
min(GT.Qual[which(GT.Qual$Pop==pop),]$intercept)
ggplot(GT.Qual[which(GT.Qual$Pop==pop),], aes(x=as.numeric(intercept),y=beta))+geom_point()+theme(axis.text=element_blank(), axis.ticks=element_blank())
ggplot(GT.Qual[which(GT.Qual$Pop==pop),], aes(x=as.numeric(intercept),y=as.numeric(beta)))+geom_point()
head(dfSums)
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
}
warnings()
ggplot(GT.Qual, aes(x=as.numeric(intercept),y=as.numeric(beta), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3)
head(GT.Qual)
ggplot(GT.Qual[which(GT.Qual$Pop=='JPT'),], aes(x=as.numeric(intercept),y=as.numeric(beta)))+geom_point()
ggplot(GT.Qual, aes(x=as.numeric(intercept),y=as.numeric(beta), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3, scales='free')
str(GT.Qual)
ggplot(GT.Qual, aes(x=reorder(as.numeric(Pos),Chr),y=as.numeric(beta), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3, scales='free')
ggplot(GT.Qual, aes(x=reorder(as.numeric(Pos), beta),y=as.numeric(beta), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3)+theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
GT.Qual$Pos<-as.numeric(as.character(GT.Qual$Pos))
GT.Qual$beta<-as.numeric(as.character(GT.Qual$beta))
GT.Qual$intercept<-as.numeric(as.character(GT.Qual$intercept))
head(GT.Qual)
ggplot(GT.Qual, aes(x=intercept,y=reorder(Pos, intercept), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3)+theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(GT.Qual, aes(x=intercept,y=reorder(Pos, intercept), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3, scales='free.x')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept,y=reorder(Pos, intercept), color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3, scales='free_x')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept,y=beta, color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=3, scales='free_x')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept, color=Pop))+geom_histogram()+facet_wrap(.~Pop, ncol=3, scales='free_x')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density(bins=10)+facet_wrap(.~Pop, ncol=3, scales='free_x')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=3, scales='free_x')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=3, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=3, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=3, scales='free_y')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=3, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=1, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
stat[[1]]
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_violin()+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=intercept,y=_density_ fill=Pop))+geom_violin()+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=Pop,y=intercept fill=Pop))+geom_violin()+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=Pop,y=intercept, fill=Pop))+geom_violin()+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=Pop,y=intercept, fill=Pop))+geom_violin()+guides(fill=FALSE)
head(GT.Qual[which(GT.Qual$intercept < 1000),])
head(GT.Qual[which(GT.Qual$intercept < -1000),])
head(GT.Qual[which(GT.Qual$intercept < -10000),])
head(GT.Qual[which(GT.Qual$intercept < -100000),])
nrow(GT.Qual[which(GT.Qual$intercept < -100000),])
ggplot(GT.Qual[which(GT.Qual$intercept < -100000),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+facet_wrap(.~Pos)
table(GT.Qual[which(GT.Qual$intercept < -100000),]$value)
table(GT.Qual[which(GT.Qual$intercept < -100000),]$value,GT.Qual[which(GT.Qual$intercept < -100000),]$Pos)
GT.Qual<-merge(melt.GT, SubMeta, by.x='variable',by.y='Name')#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''
head(GT.Qual[which(GT.Qual$Pop=='MSL'),])
head(GT.Qual[which((GT.Qual$Pop=='MSL')&(GT.Qual$Pos==39722440)),])
table(GT.Qual[which((GT.Qual$Pop=='MSL')&(GT.Qual$Pos==39722440)),]$value)
ggplot(GT.Qual[which((GT.Qual$Pop=='MSL')&(GT.Qual$Pos==39722440)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
}#
GT.Qual$Pos<-as.numeric(as.character(GT.Qual$Pos))#
GT.Qual$beta<-as.numeric(as.character(GT.Qual$beta))#
GT.Qual$intercept<-as.numeric(as.character(GT.Qual$intercept))
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=intercept,y=beta, color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)#
ggsave('~/Documents/Regression/JPT_sig6_LogisticPerPop_interceptDensity.jpg')#
ggplot(GT.Qual, aes(x=intercept,y=beta, color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=2, scales='free')+guides(color=FALSE)#
ggsave('~/Documents/Regression/JPT_sig6_LogisticPerPop_interceptBeta.jpg')
ggplot(GT.Qual, aes(x=intercept,y=beta, color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=2, scales='free')+guides(color=FALSE)+geom_vline(xintercept=0,color='grey70')#
ggsave('~/Documents/Regression/JPT_sig6_LogisticPerPop_interceptBeta.jpg')
ggplot(GT.Qual[which((GT.Qual$Pop=='MSL')&(GT.Qual$Pos==39722440)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()
stat[[1]]
stat[[100]]
pop
stat[100]
stat[10]
NorMeta<-read.table('~/genomes/genomes/1000GenomesQual_INT.pheno',col.names=c('ID','ID2','Quality'))
head(NorMeta)
NorMeta<-read.table('~/genomes/genomes/1000GenomesQual_INT.pheno',col.names=c('Name','ID','Quality'))
SubMeta<-merge(SubMeta,NorMeta, by='Name')
head(SubMeta)
SubMeta<-unique(Meta[c('Name','Pop', 'average_quality_of_mapped_bases')])#
SubMeta$BinQual<-0#
SubMeta[which(SubMeta$average_quality_of_mapped_bases<30),]$BinQual<-1#
##Transformed Quality Score#
NorMeta<-read.table('~/genomes/genomes/1000GenomesQual_INT.pheno',col.names=c('Name','ID','Quality'))#
SubMeta<-merge(SubMeta,NorMeta[,c('Name','Quality')], by='Name')
head(SubMeta)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
#
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
}#
GT.Qual$Pos<-as.numeric(as.character(GT.Qual$Pos))#
GT.Qual$beta<-as.numeric(as.character(GT.Qual$beta))#
GT.Qual$intercept<-as.numeric(as.character(GT.Qual$intercept))
head(GT.Qual)
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression on GT by Quality')
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')
ggplot(GT.Qual, aes(x=intercept, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2, scales='free')+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')#
ggsave('~/Documents/Regression/JPT_sig6_LogisticPerPop_interceptDensity.jpg')#
ggplot(GT.Qual, aes(x=intercept,y=beta, color=Pop))+geom_point()+facet_wrap(.~Pop, ncol=2, scales='free')+guides(color=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Intercept by Beta')#
ggsave('~/Documents/Regression/JPT_sig6_LogisticPerPop_interceptBeta.jpg')
Hamming<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(Distance=sum(value != BinQual)) %>% as.data.frame
head(Hamming)
Hamming<-merge(Hamming, GT.Qual, by=c('Pos','Pop'))
head(Hamming)
Hamming<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(Distance=sum(value != BinQual)) %>% as.data.frame#
Hamming<-merge(Hamming, unique(GT.Qual[,c('Chr','Pos','Pop')]), by=c('Pos','Pop'))
head(Hamming)
str(Hamming)
ggplot(Hamming,aes(x=reorder(Pos,Chr),y=Distance,color=Pop))+geom_point()+facet_wrap(.~Pop)
ggplot(Hamming,aes(x=reorder(Pos,Chr),y=Distance,color=Pop))+geom_point()+facet_wrap(.~Pop)+theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggplot(Hamming,aes(x=Distance))+geom_point()+facet_grid(Pop~Pop)
library(GGally)
install.packages(GGally)
install.packages('GGally')
library(GGally)
ggpairs(iris, aes(colour = Species, alpha = 0.4))
ggpairs(Hamming, aes(colour = Pop, alpha = 0.4))
Hsub<-Hamming[which(Hamming$Pop %in% c('JPT','YRI','PUR','GBR','CEU')),]
ggpairs(Hsub, aes(colour = Pop, alpha = 0.4))
Hsub<-droplevels(Hamming[which(Hamming$Pop %in% c('JPT','YRI','PUR','GBR','CEU')),])
ggpairs(Hsub, aes(colour = Pop, alpha = 0.4))
ggpairs(Hsub[,c('Distance')], aes(colour = Pop, alpha = 0.4))
ggpairs(Hsub[,c('Distance','Pop')], aes(colour = Pop, alpha = 0.4))
ggplot(Hamming,aes(x=Distance,color=Pop))+geom_denisty()+facet_wrap(.~Pop)+theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggplot(Hamming,aes(x=Distance,color=Pop))+geom_density()+facet_wrap(.~Pop)+theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop)
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=1)
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
head(Hamming)
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
head(GT.Qual)
stat[30]
coef(stat[30])
stat[30]$coefficients
coef(stat[[30]])
stat[[30]]$Deviance
stat[[30]]$aic
stat[[30]]$aic[1]
stat[[30]]$aic
stat[[30]][[aic]]
stat[[30]][aic]
stat[[30,aic]]
coef(stat[[30]])
AIC(stat[[30]])
deviance(stat[[30]])
stat[[30]]
stat[[30]][["Resid. Dev"]]
stat[[30]]["Resid. Dev"]
anova(stat[[30]], test="Chi")
stat[[30]]
anova(stat[[30]], test="Chi")[1,5]
anova(stat[[30]], test="Chi")[1,1]
q=anova(stat[[30]], test="Chi")
q[1,5]
q[1]
q[3]
q[4]
q[5]
q[5,2]
q[5,1]
q[5]
q[5,1]
q[1,5]
q[5][1]
q[5][2]
q[5][[1]]
q[5][[1,2]]
q[5][[1,1]]
q[5][[2,1]]
anova(stat[[30]], test="Chi")[5][[2,1]]
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) nova(x, test="Chi")[5][[2,1]])				#
}
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''
head(GT.Qual)
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) anova(x, test="Chi")[5][[2,1]])				#
}
warnings
head(GT.Qual)
GT.Qual$Plog10<--log10(GT.Qual$p)
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
head(GT.Qual)
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')
head(qqnorm(GT.Qual$Plog10))
qqnorm(GT.Qual$p, pch = 1, frame = FALSE)#
qqline(GT.Qual$p, col = "steelblue", lwd = 2)
qqnorm(GT.Qual$Plog10, pch = 1, frame = FALSE)#
qqline(GT.Qual$Plog10, col = "steelblue", lwd = 2)
stat[[30]]
anova(stat[[30]], test="Chi")
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
anova(stat[[1]], test="Chi")
glm(formula = value ~ Quality, data = gtQual[which(gtQual$Pos == )])
head(gtQual)
glm(formula = value ~ Quality, data = gtQual[which(gtQual$Pos == 100566606),], family=binomial)
xx = gtQual[which(gtQual$Pos == 100566606)
xx = gtQual[which(gtQual$Pos == 100566606),]
xx
head(xx)
glm(formula = value ~ Quality + Chr, data = xx, family=binomial)
str(xx)
glm(formula = value ~ Quality + Chr, data = xx, family=binomial)
head(xx)
glm(formula = value ~ Quality + average_quality_of_mapped_bases, data = xx, family=binomial)
foo = glm(formula = value ~ Quality + average_quality_of_mapped_bases, data = xx, family=binomial)
stat(foo)
summary(foo)
foo = glm(formula = value ~ Quality, data = xx, family=binomial)
summary(foo)
summary(stat[[30]])
anova(stat[[30]], test='Chi')
head(xx)
ggplot(xx, aes(x= Quality, y=value))+geom_point()
pop
summary(stat[[30]])[2]
summary(stat[[30]])[1,2]
summary(stat[[30]])[1]
summary(stat[[30]])$coef[4]
summary(stat[[30]])$coef
summary(stat[[30]])$coef[2,4]
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(stat[[30]])$coef[2,4])				#
}
warnings()
head(GT.Qual)
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
head(jptSub)
qqnorm(jptSub$Plog10)
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}
warnings()
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
head(gtQual)
str(gtQual)
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))
ggplot(Hamming,aes(x=Distance))+geom_point()+facet_grid(Pop~Pop)
ggplot(Hamming,aes(x=Distance))+geom_density()+facet_grid(.~Pop)
ggplot(Hamming,aes(x=Distance, fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''#
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Pos<-as.numeric(as.character(GT.Qual$Pos))#
GT.Qual$beta<-as.numeric(as.character(GT.Qual$beta))#
GT.Qual$intercept<-as.numeric(as.character(GT.Qual$intercept))#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
warnings()
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
jptSub<-GT.Qual[which(GT.Qual$Pop=='GBR'),]
qqnorm(jptSub$Plog10)
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
ggsave('~/Documents/Regression/JPT_sig6_Plog10PerPop.jpg',height=5,width=8)
ggsave('~/Documents/Regression/JPT_sig6_Plog10PerPop.jpg',height=8,width=11)
head(GT.Qual[which((GT.Qual$Plog10 > 6)&(GT.Qual$Pop == 'JPT')),])
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()
head(GT.Qual[which((GT.Qual$Plog10 > 8)&(GT.Qual$Pop == 'JPT')),])
head(GT.Qual[which((GT.Qual$Plog10 > 7)&(GT.Qual$Pop == 'JPT')),])
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_manual(breaks=c(0,1))
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))+labs(y='Genotype',x='Quality')
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))+labs(y='Genotype',x='Quality')+geom_smooth(method = "glm",     method.args = list(family = "binomial"), se = FALSE,size=0.5)
write.table(unique(Meta[c('Name','Pop', 'average_quality_of_mapped_bases')]), file='/Volumes/SpaceMan/QualityScoresPerID.txt')
