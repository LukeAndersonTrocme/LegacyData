ggpairs(Hsub[,c('Distance','Pop')], aes(colour = Pop, alpha = 0.4))
ggplot(Hamming,aes(x=Distance,color=Pop))+geom_denisty()+facet_wrap(.~Pop)+theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggplot(Hamming,aes(x=Distance,color=Pop))+geom_density()+facet_wrap(.~Pop)+theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop)
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=1)
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
head(Hamming)
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()
ggplot(Hamming,aes(x=Distance,fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
head(GT.Qual)
stat[30]
coef(stat[30])
stat[30]$coefficients
coef(stat[[30]])
stat[[30]]$Deviance
stat[[30]]$aic
stat[[30]]$aic[1]
stat[[30]]$aic
stat[[30]][[aic]]
stat[[30]][aic]
stat[[30,aic]]
coef(stat[[30]])
AIC(stat[[30]])
deviance(stat[[30]])
stat[[30]]
stat[[30]][["Resid. Dev"]]
stat[[30]]["Resid. Dev"]
anova(stat[[30]], test="Chi")
stat[[30]]
anova(stat[[30]], test="Chi")[1,5]
anova(stat[[30]], test="Chi")[1,1]
q=anova(stat[[30]], test="Chi")
q[1,5]
q[1]
q[3]
q[4]
q[5]
q[5,2]
q[5,1]
q[5]
q[5,1]
q[1,5]
q[5][1]
q[5][2]
q[5][[1]]
q[5][[1,2]]
q[5][[1,1]]
q[5][[2,1]]
anova(stat[[30]], test="Chi")[5][[2,1]]
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) nova(x, test="Chi")[5][[2,1]])				#
}
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''
head(GT.Qual)
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) anova(x, test="Chi")[5][[2,1]])				#
}
warnings
head(GT.Qual)
GT.Qual$Plog10<--log10(GT.Qual$p)
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
head(GT.Qual)
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')
head(qqnorm(GT.Qual$Plog10))
qqnorm(GT.Qual$p, pch = 1, frame = FALSE)#
qqline(GT.Qual$p, col = "steelblue", lwd = 2)
qqnorm(GT.Qual$Plog10, pch = 1, frame = FALSE)#
qqline(GT.Qual$Plog10, col = "steelblue", lwd = 2)
stat[[30]]
anova(stat[[30]], test="Chi")
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
anova(stat[[1]], test="Chi")
glm(formula = value ~ Quality, data = gtQual[which(gtQual$Pos == )])
head(gtQual)
glm(formula = value ~ Quality, data = gtQual[which(gtQual$Pos == 100566606),], family=binomial)
xx = gtQual[which(gtQual$Pos == 100566606)
xx = gtQual[which(gtQual$Pos == 100566606),]
xx
head(xx)
glm(formula = value ~ Quality + Chr, data = xx, family=binomial)
str(xx)
glm(formula = value ~ Quality + Chr, data = xx, family=binomial)
head(xx)
glm(formula = value ~ Quality + average_quality_of_mapped_bases, data = xx, family=binomial)
foo = glm(formula = value ~ Quality + average_quality_of_mapped_bases, data = xx, family=binomial)
stat(foo)
summary(foo)
foo = glm(formula = value ~ Quality, data = xx, family=binomial)
summary(foo)
summary(stat[[30]])
anova(stat[[30]], test='Chi')
head(xx)
ggplot(xx, aes(x= Quality, y=value))+geom_point()
pop
summary(stat[[30]])[2]
summary(stat[[30]])[1,2]
summary(stat[[30]])[1]
summary(stat[[30]])$coef[4]
summary(stat[[30]])$coef
summary(stat[[30]])$coef[2,4]
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(stat[[30]])$coef[2,4])				#
}
warnings()
head(GT.Qual)
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
head(jptSub)
qqnorm(jptSub$Plog10)
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}
warnings()
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
head(gtQual)
str(gtQual)
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))
ggplot(Hamming,aes(x=Distance))+geom_point()+facet_grid(Pop~Pop)
ggplot(Hamming,aes(x=Distance))+geom_density()+facet_grid(.~Pop)
ggplot(Hamming,aes(x=Distance, fill=Pop))+geom_density()+facet_wrap(.~Pop,ncol=2)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]#
GT.Qual$intercept=''#
GT.Qual$beta=''#
GT.Qual$p=''#
for(pop in unique(GT.Qual$Pop)){#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
print(pop)#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
GT.Qual[which(GT.Qual$Pop==pop),]$intercept<-sapply(stat,function(x) coef(x)[1])#
GT.Qual[which(GT.Qual$Pop==pop),]$beta<-sapply(stat,function(x) coef(x)[2])			#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Pos<-as.numeric(as.character(GT.Qual$Pos))#
GT.Qual$beta<-as.numeric(as.character(GT.Qual$beta))#
GT.Qual$intercept<-as.numeric(as.character(GT.Qual$intercept))#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
warnings()
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
jptSub<-GT.Qual[which(GT.Qual$Pop=='GBR'),]
qqnorm(jptSub$Plog10)
jptSub<-GT.Qual[which(GT.Qual$Pop=='JPT'),]
qqnorm(jptSub$Plog10)
ggplot(GT.Qual, aes(x=Plog10, fill=Pop))+geom_density()+facet_wrap(.~Pop, ncol=2)+theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line=element_blank())+guides(fill=FALSE)+geom_vline(xintercept=0,color='grey70')+ggtitle('Density of Intercepts for \nLogistic Regression of Genotype by Quality')
ggplot(GT.Qual, aes(x=Pop,y=Plog10, fill=Pop))+geom_violin()+guides(fill=FALSE)
ggsave('~/Documents/Regression/JPT_sig6_Plog10PerPop.jpg',height=5,width=8)
ggsave('~/Documents/Regression/JPT_sig6_Plog10PerPop.jpg',height=8,width=11)
head(GT.Qual[which((GT.Qual$Plog10 > 6)&(GT.Qual$Pop == 'JPT')),])
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()
head(GT.Qual[which((GT.Qual$Plog10 > 8)&(GT.Qual$Pop == 'JPT')),])
head(GT.Qual[which((GT.Qual$Plog10 > 7)&(GT.Qual$Pop == 'JPT')),])
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_manual(breaks=c(0,1))
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))+labs(y='Genotype',x='Quality')
ggplot(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos== 100033562)),], aes(x= average_quality_of_mapped_bases, y=value))+geom_point()+scale_y_continuous(breaks=c(0,1))+labs(y='Genotype',x='Quality')+geom_smooth(method = "glm",     method.args = list(family = "binomial"), se = FALSE,size=0.5)
write.table(unique(Meta[c('Name','Pop', 'average_quality_of_mapped_bases')]), file='/Volumes/SpaceMan/QualityScoresPerID.txt')
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes\ 2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/GitHub/QualityPaper/Clean_Logistic.R /Users/luke/Documents/PhD/data/CHR22.Genotypes.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, colClasses= classes, nrow=100)
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, nrow=100)
library(reshape2)
#Pop and Ind Names #~/genomes/genomes/PopNames/Name.BigPop.Pop.txt#
NamePop<-read.table('~/Documents/PhD/data/Name.BigPop.Pop.txt', col.names=c('Name', 'BigPop', 'Pop'))#
NamePop<-NamePop[which(NamePop$Pop != 'NAG'),]#
#
#Quality per individual#
Meta<-read.table("~/Dropbox/LukeTemp/1000GenomesMetaData.txt")#
Meta$SUBMISSION.DATE<-as.Date(Meta$SUBMISSION.DATE, "%Y-%m-%d")  #
SubMeta<-unique(Meta[c('Name','Pop', 'average_quality_of_mapped_bases')])#
print('Welcome to the R script')
names(GT)=c('Chr','Pos', as.character(NamePop$Name))#
print('Table is Loaded')#
#Melt, reshape#
melt.GT<-melt(GT,id=c('Chr','Pos'))#
rm(GT)#
print('Table is Melted')#
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
rm(melt.GT)
head(melt.GT)
write.table(SubMeta,file='~/Dropbox/LukeTemp/SubMeta.txt')
SubMeta <-read.table('~/Dropbox/LukeTemp/SubMeta.txt')
print('Table is Loaded')#
#Melt, reshape#
melt.GT<-melt(GT,id=c('Chr','Pos'))#
rm(GT)#
print('Table is Melted')#
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
rm(melt.GT)#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]
??ggplot2
??%>%
?%>%
??pipe
library(magrittr)
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame
??group_by
??group
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value))) %>% as.data.frame
?group_by
??group_by
??group by
??group
head(table(GT.Qual$value, GT.Qual $Pos, GT.Qual $Pop))
head(table(GT.Qual$value))
head(GT.Qual$value)
head(GT.Qual)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
melt.GT<-melt(GT,id=c('Chr','Pos'))
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, nrow=100)
names(GT)=c('Chr','Pos', as.character(NamePop$Name))#
print('Table is Loaded')#
#Melt, reshape#
melt.GT<-melt(GT,id=c('Chr','Pos'))#
rm(GT)#
print('Table is Melted')#
#Merge with Quality#
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
rm(melt.GT)#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$SumOver==2),]
head(table(GT.Qual$value))
head(GT.Qual)
head(SubMeta)
head(GT)
GT<-read.table('/Users/luke/Documents/PhD/data/CHR22.Genotypes 2.txt',header=F, nrow=100)
head(GT)
names(GT)=c('Chr','Pos', as.character(NamePop$Name))
melt.GT<-melt(GT,id=c('Chr','Pos'))
head(melt.GT)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
GT.Qual$Pop<-as.factor(GT.Qual$Pop)
GT.Qual$Pos<-as.factor(GT.Qual$Pos)
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))
head(GT.Qual)
head(table(GT.Qual$value))
head(table(GT.Qual$value,T.Qual$Pop))
head(table(GT.Qual$value,GT.Qual$Pop))
head(as.data.frame(table(GT.Qual$value,GT.Qual$Pop)))
head(as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos)))
names(dfSums)<-c('value','Pop','Pos','Freq')
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))
names(dfSums)<-c('value','Pop','Pos','Freq')
head(dfSums)
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr')]
head(GT.Qual)
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])
gtQual$value<-as.numeric(as.character(gtQual$value))
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value')]
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value')]#
#
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])
gtQual$value<-as.numeric(as.character(gtQual$value))
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value.x')]
head(GT.Qual)
gtQual$value<-as.numeric(as.character(gtQual$value.x))
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])
gtQual$value<-as.numeric(as.character(gtQual$value.x))
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ average_quality_of_mapped_bases, data=x, family=binomial)))
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])
head(stat[[20]])
head(stat[[20]])
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]#
#
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value ~ Quality, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
head(GT.Qual)
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]
GT.Qual<-merge(SubMeta,melt.GT, by.y='variable',by.x='Name')#
#rm(melt.GT)#
#make it a factor#
GT.Qual$Pop<-as.factor(GT.Qual$Pop)#
GT.Qual$Pos<-as.factor(GT.Qual$Pos)#
#####
GT.Qual$value<-gsub(2,1, GT.Qual$value) #collapse GT#
#####
GT.Qual $value<-as.numeric(as.character(GT.Qual $value))#
#Get number of alleles per position per population#
dfSums <-as.data.frame(table(GT.Qual$value,GT.Qual$Pop,GT.Qual$Pos))#
names(dfSums)<-c('value','Pop','Pos','Freq')#
#dfSums<-GT.Qual %>% group_by(Pos,Pop) %>% summarize(SumOver=length(table(value,Pos,Pop))) %>% as.data.frame#
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))#
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]#
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','Quality','Chr','value.x')]
head(GT.Qual)
GT.Qual<-GT.Qual[,c('Pos','Pop','Name','average_quality_of_mapped_bases','Chr','value.x')]
head(GT.Qual)
GT.Qual$p=''#
#For each pop#
for(pop in unique(GT.Qual$Pop)){#
	print(pop)#
	#subset#
gtQual<-droplevels(GT.Qual[which(GT.Qual$Pop==pop),])#
gtQual$value<-as.numeric(as.character(gtQual$value.x))#
#for each position, run glm#
stat<-with(gtQual, #
		by(gtQual, gtQual$Pos, #
			function(x) glm(value.x ~ average_quality_of_mapped_bases, data=x, family=binomial)))#
#extract P value					#
GT.Qual[which(GT.Qual$Pop==pop),]$p<-sapply(stat,function(x) summary(x)$coef[2,4])				#
}#
GT.Qual$Plog10<--log10(as.numeric(GT.Qual$p))
head(stat[[1]])
head(GT.Qual)
test<-droplevels(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos=='16554752'))),])
test<-droplevels(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos=='16554752')),])
head(test)
glm(value.x ~ average_quality_of_mapped_bases, data=test, family=binomial)
head(test)
ggplot(test, aes(x= average_quality_of_mapped_bases, y= value.x))+geom_point()
library(ggplot2)
ggplot(test, aes(x= average_quality_of_mapped_bases, y= value.x))+geom_point()
head(dfSums)
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))
head(GT.Qual)
GT.Qual<-GT.Qual[which(GT.Qual$Freq>0),]
head(GT.Qual)
test<-droplevels(GT.Qual[which((GT.Qual$Pop=='JPT')&(GT.Qual$Pos=='16554752')),])
ggplot(test, aes(x= average_quality_of_mapped_bases, y= value.x))+geom_point()
GT.Qual<-merge(GT.Qual,dfSums,by=c('Pos','Pop'))
